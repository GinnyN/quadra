[{"/Users/ginnyn/Desktop/quadra/src/index.js":"1","/Users/ginnyn/Desktop/quadra/src/App.js":"2","/Users/ginnyn/Desktop/quadra/src/reportWebVitals.js":"3","/Users/ginnyn/Desktop/quadra/src/grid/index.js":"4","/Users/ginnyn/Desktop/quadra/src/grid/cell/index.js":"5","/Users/ginnyn/Desktop/quadra/src/grid/cell/character/index.js":"6"},{"size":500,"mtime":1643479518721,"results":"7","hashOfConfig":"8"},{"size":282,"mtime":1643479518720,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1643479518721,"results":"10","hashOfConfig":"8"},{"size":8760,"mtime":1643553130949,"results":"11","hashOfConfig":"8"},{"size":1173,"mtime":1643552966643,"results":"12","hashOfConfig":"8"},{"size":1535,"mtime":1643553178862,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eag5ct",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/ginnyn/Desktop/quadra/src/index.js",[],"/Users/ginnyn/Desktop/quadra/src/App.js",["29"],"/Users/ginnyn/Desktop/quadra/src/reportWebVitals.js",[],"/Users/ginnyn/Desktop/quadra/src/grid/index.js",["30"],"import React, {useEffect, useState} from \"react\"\nimport Cell from \"./cell\"\nimport style  from \"./style.module.css\"\n\nconst character = {\n    \"maxHP\": 100,\n    \"currentHP\": 100,\n    \"strength\": 2,\n    \"active\": false,\n    \"suceptible\": false,\n}\n\nconst Grid = ({ map } ) => {\n\n    const [cells, setCells] = useState([]);\n    const [playerActive, setPlayerActive] = useState({});\n    const [teamRed, setTeamRed] = useState([]);\n    const [teamBlue, setTeamBlue] = useState([]);\n    const [turn, setTurn] = useState('red');\n\n    useEffect (() => {\n        const cells = [];\n        const teamRed = [];\n        const teamBlue = [];\n        for(let x = 0; x < 10; x++) {\n            for(let y = 0; y < 10; y++) {\n                if(map[`${x}${y}`]) {\n                    if(map[`${x}${y}`].player){\n                        const newChar = {...character, ...map[`${x}${y}`].player} ;\n                        cells.push({x, y, activated: false, ...map[`${x}${y}`], player: newChar });\n                        if(newChar.team === \"blue\") teamBlue.push(newChar);\n                        else teamRed.push(newChar);\n                    } else cells.push({x, y, activated: false, ...map[`${x}${y}`], player: false});\n                }\n                else cells.push({x, y, player: false, activated: false, usable: true, onCross: false });\n            }\n        }\n        setCells(cells);\n        setTeamRed(teamRed);\n        setTeamBlue(teamBlue);\n    }, []);\n\n    const inactivateCurrentPlayer = ({x,y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player.tired = true;\n        if(temp[(10*playerActive.x)-1+playerActive.y]) temp[(10*playerActive.x)-1+playerActive.y].activated = false;\n        if(temp[(10*playerActive.x)+1+playerActive.y]) temp[(10*playerActive.x)+1+playerActive.y].activated = false;\n        if(temp[(10*(playerActive.x-1))+playerActive.y]) temp[(10*(playerActive.x-1))+playerActive.y].activated = false;\n        if(temp[(10*(playerActive.x+1))+playerActive.y]) temp[(10*(playerActive.x+1))+playerActive.y].activated = false;\n        setCells(temp);\n    }\n\n    const removeCrossCurrentPlayer = ({x,y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player.tired = true;\n        if(temp[(10*playerActive.x)-1+playerActive.y]) temp[(10*playerActive.x)-1+playerActive.y].onCross = false;\n        if(temp[(10*playerActive.x)+1+playerActive.y]) temp[(10*playerActive.x)+1+playerActive.y].onCross = false;\n        if(temp[(10*(playerActive.x-1))+playerActive.y]) temp[(10*(playerActive.x-1))+playerActive.y].onCross = false;\n        if(temp[(10*(playerActive.x+1))+playerActive.y]) temp[(10*(playerActive.x+1))+playerActive.y].onCross = false;\n        setCells(temp);\n    }\n\n    const movePlayer = ({x, y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player = temp[10*playerActive.x + playerActive.y].player;\n        if(temp[10*playerActive.x + playerActive.y]) temp[10*playerActive.x + playerActive.y].player = false;\n        setCells(temp);\n        inactivateCurrentPlayer({x, y});\n    }\n\n    const underAttack = ({x , y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player.currentHP -= temp[10*playerActive.x + playerActive.y].player.strength;\n        setCells(temp);\n        removeCrossCurrentPlayer(playerActive);\n    }\n\n    const changeTurn = () => {\n        if(turn==='red'){\n            const teamRedT = teamRed.map((item) => {\n                item.tired = false;\n                return item;\n            });\n            setTeamRed(teamRedT);\n            setTurn('blue');\n        } else {\n            const teamBlueT = teamBlue.map((item) => {\n                item.tired = false;\n                return item;\n            });\n            setTeamBlue(teamBlueT);\n            setTurn('red');\n        }\n    }\n\n    const activateAttack = ({x, y}) => {\n        const temp = [...cells];\n        if(playerActive.x === x && playerActive.y === y) {\n            if(temp[(10*x)-1+y]) {\n                if(temp[(10*x)-1+y].player) temp[(10*x)-1+y].player.suceptible = false; \n                temp[(10*x)-1+y].onCross = false;\n            }\n            if(temp[(10*x)+1+y]){\n                if(temp[(10*x)+1+y].player) temp[(10*x)+1+y].player.suceptible = false; \n                temp[(10*x)+1+y].onCross = false;\n            }\n            if(temp[(10*(x-1))+y]){ \n                if(temp[(10*(x-1))+y].player) temp[(10*(x-1))+y].player.suceptible = false; \n                temp[(10*(x-1))+y].onCross = false;\n            }\n            if(temp[(10*(x+1))+y]) {\n                if(temp[(10*(x+1))+y].player) temp[(10*(x+1))+y].player.suceptible = false; \n                temp[(10*(x+1))+y].onCross = false;\n            }\n            setPlayerActive({});\n        } else {\n            if(playerActive.x) {\n                const {x, y} = playerActive;\n                if(temp[(10*x)-1+y]) {\n                    if(temp[(10*x)-1+y].player) temp[(10*x)-1+y].player.suceptible = false; \n                    temp[(10*x)-1+y].onCross = false;\n                }\n                if(temp[(10*x)+1+y]){\n                    if(temp[(10*x)+1+y].player) temp[(10*x)+1+y].player.suceptible = false; \n                    temp[(10*x)+1+y].onCross = false;\n                }\n                if(temp[(10*(x-1))+y]){ \n                    if(temp[(10*(x-1))+y].player) temp[(10*(x-1))+y].player.suceptible = false; \n                    temp[(10*(x-1))+y].onCross = false;\n                }\n                if(temp[(10*(x+1))+y]) {\n                    if(temp[(10*(x+1))+y].player) temp[(10*(x+1))+y].player.suceptible = false; \n                    temp[(10*(x+1))+y].onCross = false;\n                }\n            }\n            if(temp[(10*x)-1+y]) {\n                if(temp[(10*x)-1+y].player) temp[(10*x)-1+y].player.suceptible = true; \n                temp[(10*x)-1+y].onCross = true;\n            }\n            if(temp[(10*x)+1+y]){\n                if(temp[(10*x)+1+y].player) temp[(10*x)+1+y].player.suceptible = true; \n                temp[(10*x)+1+y].onCross = true;\n            }\n            if(temp[(10*(x-1))+y]){ \n                if(temp[(10*(x-1))+y].player) temp[(10*(x-1))+y].player.suceptible = true; \n                temp[(10*(x-1))+y].onCross = true;\n            }\n            if(temp[(10*(x+1))+y]) {\n                if(temp[(10*(x+1))+y].player) temp[(10*(x+1))+y].player.suceptible = true; \n                temp[(10*(x+1))+y].onCross = true;\n            }\n            setPlayerActive({x, y});\n        }\n        setCells(temp);\n    }\n\n    const activateMove = ({x, y}) => {\n        const temp = [...cells];\n        if(playerActive.x === x && playerActive.y === y) {\n            if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = false;\n            if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = false;\n            if(temp[(10*(x-1))+y]) temp[(10*(x-1))+y].activated = false;\n            if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = false;\n            setPlayerActive({});\n        } else {\n            if(playerActive.x) {\n                const {x, y} = playerActive;\n                if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = false;\n                if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = false;\n                if(temp[(10*(x-1))+y]) temp[(10*(x-1))+y].activated = false;\n                if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = false;\n            }\n            if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = true;\n            if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = true;\n            if(temp[(10*(x-1))+y])temp[(10*(x-1))+y].activated = true;\n            if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = true;\n            setPlayerActive({x, y});\n        }\n        setCells(temp);\n    }\n\n    return <div className={style.playboard}>\n        <div className={style.gridSetting}>\n        {cells.map((item) => <Cell \n                onMove={movePlayer}\n                x={item.x} \n                y={item.y} \n                player={item.player}\n                activated={item.activated}\n                usable={item.usable}\n                onCross={item.onCross}\n                turn={turn}\n                activateAttack={() => activateAttack(item)}\n                activateMove={() => activateMove(item)}\n                underAttack={() => underAttack(item)}\n            />)}   \n        </div>\n        <div>\n            <p>Turn {turn}</p>\n            <button onClick={changeTurn}>End Turn</button>\n            <ul>\n                <li>Team Red</li>\n                {teamRed.map((item, index)=> <li>{index}: {item.currentHP}/{item.maxHP}</li>)}\n                <li>Team Blue</li>\n                {teamBlue.map((item, index)=> <li>{index}: {item.currentHP}/{item.maxHP}</li>)}\n            </ul>\n        </div>\n    </div>;\n}\n\nexport default Grid;",["31","32"],"/Users/ginnyn/Desktop/quadra/src/grid/cell/index.js",[],"/Users/ginnyn/Desktop/quadra/src/grid/cell/character/index.js",["33"],"import React, { useState } from \"react\";\nimport style from \"./style.module.css\";\n\nconst STATUS = {\n    WAIT: 0,\n    ATTACKING: 1,\n    MOVING: 2\n}\n\nconst Character = ({ player, turn, onAttack, onMove, underAttack }) => {\n    const [showMenu, setShowMenu] = useState(false);\n    const [charStatus, setCharStatus] = useState(STATUS.WAIT);\n\n    const toggleShowMenu = (event) => {\n        event.stopPropagation();\n        if(player.suceptible) underAttack();\n        if(player.tired) return;\n        if(turn === player.team) setShowMenu(!showMenu);\n        if(charStatus === STATUS.MOVING) {\n            onMove();\n            setCharStatus(STATUS.WAIT);\n        }\n    }\n\n    const innerOnMove = (event) => {\n        event.stopPropagation();\n        setShowMenu(!showMenu);\n        setCharStatus(STATUS.MOVING);\n        onMove();\n    }\n\n    const innerOnAttack = (event) => {\n        event.stopPropagation();\n        setShowMenu(!showMenu);\n        setCharStatus(STATUS.ATTACKING);\n        onAttack();\n    }\n\n    return <React.Fragment>\n        { showMenu && <div className={style.menu}>\n            <ul>\n                <li onClick={innerOnMove}>Move</li>\n                <li onClick={innerOnAttack}>Attack</li>\n                <li onClick={toggleShowMenu}>Close</li>\n            </ul>\n        </div> }\n        <img \n            onClick={toggleShowMenu}\n            className={`${style.dot} ${player.tired && style.tired} `} \n            src={require('./../../../img/dot.png')}\n        />\n    </React.Fragment>\n}\n\nexport default Character;",{"ruleId":"34","severity":1,"message":"35","line":1,"column":8,"nodeType":"36","messageId":"37","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"39","line":41,"column":8,"nodeType":"40","endLine":41,"endColumn":10,"suggestions":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":47,"column":9,"nodeType":"48","endLine":51,"endColumn":11},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"52","fix":"53"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [map]",{"range":"54","text":"55"},[1443,1445],"[map]"]