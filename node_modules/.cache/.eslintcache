[{"/Users/ximena.contreras/Desktop/test/quadra/src/index.js":"1","/Users/ximena.contreras/Desktop/test/quadra/src/App.js":"2","/Users/ximena.contreras/Desktop/test/quadra/src/reportWebVitals.js":"3","/Users/ximena.contreras/Desktop/test/quadra/src/grid/index.js":"4","/Users/ximena.contreras/Desktop/test/quadra/src/grid/cell/index.js":"5"},{"size":500,"mtime":1643400745360,"results":"6","hashOfConfig":"7"},{"size":282,"mtime":1643410533654,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1643400745458,"results":"9","hashOfConfig":"7"},{"size":3996,"mtime":1643420271392,"results":"10","hashOfConfig":"7"},{"size":780,"mtime":1643415833001,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1a5ipg6",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"/Users/ximena.contreras/Desktop/test/quadra/src/index.js",[],"/Users/ximena.contreras/Desktop/test/quadra/src/App.js",["25"],"/Users/ximena.contreras/Desktop/test/quadra/src/reportWebVitals.js",[],"/Users/ximena.contreras/Desktop/test/quadra/src/grid/index.js",["26"],"import React, {useEffect, useState} from \"react\"\nimport Cell from \"./cell\"\nimport style  from \"./style.module.css\"\n\nconst character = {\n    \"maxHP\": 100,\n    \"currentHP\": 100,\n    \"strength\": 2,\n    \"active\": false,\n}\n\nconst Grid = ({ map } ) => {\n\n    const [cells, setCells] = useState([]);\n    const [playerActive, setPlayerActive] = useState({});\n    const [currentChar, setCurrentChar] = useState([]);\n\n    useEffect (() => {\n        const cells = [];\n        const currentChar = [];\n        for(let x = 0; x < 10; x++) {\n            for(let y = 0; y < 10; y++) {\n                if(map[`${x}${y}`]) {\n                    if(map[`${x}${y}`].player){\n                        const newChar = {...character};\n                        cells.push({x, y, activated: false, ...map[`${x}${y}`], player: newChar });\n                        currentChar.push(newChar);\n                    } else cells.push({x, y, activated: false, ...map[`${x}${y}`], player: false});\n                }\n                else cells.push({x, y, player: false, activated: false, usable: true });\n            }\n        }\n        setCells(cells);\n        setCurrentChar(currentChar);\n    }, []);\n\n    const toggleCells = ({x, y}) => {\n        const temp = [...cells];\n        if(playerActive.x === x && playerActive.y === y) {\n            if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = false;\n            if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = false;\n            if(temp[(10*(x-1))+y]) temp[(10*(x-1))+y].activated = false;\n            if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = false;\n            setPlayerActive({});\n        } else {\n            if(playerActive.x) {\n                const {x, y} = playerActive;\n                if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = false;\n                if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = false;\n                if(temp[(10*(x-1))+y]) temp[(10*(x-1))+y].activated = false;\n                if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = false;\n            }\n            if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = true;\n            if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = true;\n            if(temp[(10*(x-1))+y])temp[(10*(x-1))+y].activated = true;\n            if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = true;\n            setPlayerActive({x, y});\n        }\n        setCells(temp);\n    };\n\n    const movePlayer = ({x, y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player = temp[10*playerActive.x + playerActive.y].player;\n        if(temp[10*playerActive.x + playerActive.y]) temp[10*playerActive.x + playerActive.y].player = false;\n        if(temp[(10*playerActive.x)-1+playerActive.y]) temp[(10*playerActive.x)-1+playerActive.y].activated = false;\n        if(temp[(10*playerActive.x)+1+playerActive.y]) temp[(10*playerActive.x)+1+playerActive.y].activated = false;\n        if(temp[(10*(playerActive.x-1))+playerActive.y]) temp[(10*(playerActive.x-1))+playerActive.y].activated = false;\n        if(temp[(10*(playerActive.x+1))+playerActive.y]) temp[(10*(playerActive.x+1))+playerActive.y].activated = false;\n        setCells(temp);\n    }\n\n    const attackChar = ({x , y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player.currentHP -= temp[10*playerActive.x + playerActive.y].player.strength;\n        setCells(temp);\n    }\n\n    return <div className={style.playboard}>\n        <div className={style.gridSetting}>\n        {cells.map((item) => <Cell \n                onClick={toggleCells}\n                onMove={movePlayer}\n                onAttack={attackChar}\n                x={item.x} \n                y={item.y} \n                player={item.player}\n                activated={item.activated}\n                usable={item.usable}\n            />)}   \n        </div>\n        <div>\n            <ul>\n                {currentChar.map((item, index)=> <li>{index}: {item.currentHP}/{item.maxHP}</li>)}\n            </ul>\n        </div>\n    </div>;\n}\n\nexport default Grid;","/Users/ximena.contreras/Desktop/test/quadra/src/grid/cell/index.js",["27"],"import React from \"react\";\nimport style from \"./style.module.css\";\n\nconst Cell = ({ onClick, onMove, onAttack, x, y, player, activated, usable }) => {\n\n    const toggleDot = () => {\n        if(!usable) return;\n        if(activated && player) {\n            onAttack({x,y});\n            return\n        }\n        if(player) {\n            onClick({x, y});\n            return\n        }\n        if(activated) {\n            onMove({x, y});\n            return\n        }\n        return\n    }\n    return <div className={`${style.cell} ${usable && activated && style.activated} ${!usable && style.noUsable}`} onClick={toggleDot}>\n                { player && player.currentHP > 0 && <img className={style.dot} src={require('./../../img/dot.png')} />}\n           </div>\n}\n\nexport default Cell;",["28","29"],{"ruleId":"30","severity":1,"message":"31","line":1,"column":8,"nodeType":"32","messageId":"33","endLine":1,"endColumn":12},{"ruleId":"34","severity":1,"message":"35","line":35,"column":8,"nodeType":"36","endLine":35,"endColumn":10,"suggestions":"37"},{"ruleId":"38","severity":1,"message":"39","line":23,"column":53,"nodeType":"40","endLine":23,"endColumn":119},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.","ArrayExpression",["45"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["46"],"no-negated-in-lhs",["47"],{"desc":"48","fix":"49"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [map]",{"range":"50","text":"51"},[1162,1164],"[map]"]