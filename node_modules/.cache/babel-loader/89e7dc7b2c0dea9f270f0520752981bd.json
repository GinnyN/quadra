{"ast":null,"code":"var _jsxFileName = \"/Users/ximena.contreras/Desktop/test/quadra/src/grid/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Cell from \"./cell\";\nimport style from \"./style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst character = {\n  \"maxHP\": 100,\n  \"currentHP\": 100,\n  \"strength\": 2\n};\n\nconst Grid = _ref => {\n  _s();\n\n  let {\n    map\n  } = _ref;\n  const [cells, setCells] = useState([]);\n  const [playerActive, setPlayerActive] = useState({});\n  useEffect(() => {\n    const cells = [];\n    const chActive = [];\n\n    for (let x = 0; x < 10; x++) {\n      for (let y = 0; y < 10; y++) {\n        if (map[`${x}${y}`]) cells.push({\n          x,\n          y,\n          activated: false,\n          ...map[`${x}${y}`]\n        });\n        if (map[`${x}${y}`].player) cells[cells.length - 1].player = { ...character\n        };else cells.push({\n          x,\n          y,\n          player: false,\n          activated: false,\n          usable: true\n        });\n      }\n    }\n\n    setCells(cells);\n  }, []);\n\n  const toggleCells = _ref2 => {\n    let {\n      x,\n      y\n    } = _ref2;\n    const temp = [...cells];\n\n    if (playerActive.x === x && playerActive.y === y) {\n      temp[10 * x - 1 + y].activated = false;\n      temp[10 * x + 1 + y].activated = false;\n      temp[10 * (x - 1) + y].activated = false;\n      temp[10 * (x + 1) + y].activated = false;\n      setPlayerActive({});\n    } else {\n      if (playerActive.x) {\n        const {\n          x,\n          y\n        } = playerActive;\n        temp[10 * x - 1 + y].activated = false;\n        temp[10 * x + 1 + y].activated = false;\n        temp[10 * (x - 1) + y].activated = false;\n        temp[10 * (x + 1) + y].activated = false;\n      }\n\n      if (!temp[10 * x - 1 + y].player) temp[10 * x - 1 + y].activated = true;\n      if (!temp[10 * x + 1 + y].player) temp[10 * x + 1 + y].activated = true;\n      if (!temp[10 * (x - 1) + y].player) temp[10 * (x - 1) + y].activated = true;\n      if (!temp[10 * (x + 1) + y].player) temp[10 * (x + 1) + y].activated = true;\n      setPlayerActive({\n        x,\n        y\n      });\n    }\n\n    setCells(temp);\n  };\n\n  const movePlayer = _ref3 => {\n    let {\n      x,\n      y\n    } = _ref3;\n    const temp = [...cells];\n    temp[10 * x + y].player = true;\n    temp[10 * playerActive.x + playerActive.y].player = false;\n    temp[10 * playerActive.x - 1 + playerActive.y].activated = false;\n    temp[10 * playerActive.x + 1 + playerActive.y].activated = false;\n    temp[10 * (playerActive.x - 1) + playerActive.y].activated = false;\n    temp[10 * (playerActive.x + 1) + playerActive.y].activated = false;\n    setCells(temp);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.gridSetting,\n    children: cells.map(item => /*#__PURE__*/_jsxDEV(Cell, {\n      onClick: toggleCells,\n      onMove: movePlayer,\n      x: item.x,\n      y: item.y,\n      player: item.player,\n      activated: item.activated,\n      usable: item.usable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Grid, \"NyhlUCSGdRmNxv++WLxCf62C9ao=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/ximena.contreras/Desktop/test/quadra/src/grid/index.js"],"names":["React","useEffect","useState","Cell","style","character","Grid","map","cells","setCells","playerActive","setPlayerActive","chActive","x","y","push","activated","player","length","usable","toggleCells","temp","movePlayer","gridSetting","item"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\"\nimport Cell from \"./cell\"\nimport style  from \"./style.module.css\"\n\nconst character = {\n    \"maxHP\": 100,\n    \"currentHP\": 100,\n    \"strength\": 2,\n}\n\nconst Grid = ({ map } ) => {\n\n    const [cells, setCells] = useState([]);\n    const [playerActive, setPlayerActive] = useState({});\n\n    useEffect (() => {\n        const cells = [];\n        const chActive = [];\n        for(let x = 0; x < 10; x++) {\n            for(let y = 0; y < 10; y++) {\n                if(map[`${x}${y}`]) cells.push({x, y, activated: false, ...map[`${x}${y}`]  });\n                if(map[`${x}${y}`].player) cells[cells.length-1].player = { ...character };\n                else cells.push({x, y, player: false, activated: false, usable: true });\n            }\n        }\n        setCells(cells);\n    }, []);\n\n    const toggleCells = ({x, y}) => {\n        const temp = [...cells];\n        if(playerActive.x === x && playerActive.y === y) {\n            temp[(10*x)-1+y].activated = false;\n            temp[(10*x)+1+y].activated = false;\n            temp[(10*(x-1))+y].activated = false;\n            temp[(10*(x+1))+y].activated = false;\n            setPlayerActive({});\n        } else {\n            if(playerActive.x) {\n                const {x, y} = playerActive;\n                temp[(10*x)-1+y].activated = false;\n                temp[(10*x)+1+y].activated = false;\n                temp[(10*(x-1))+y].activated = false;\n                temp[(10*(x+1))+y].activated = false;\n            }\n            if(!temp[(10*x)-1+y].player) temp[(10*x)-1+y].activated = true;\n            if(!temp[(10*x)+1+y].player) temp[(10*x)+1+y].activated = true;\n            if(!temp[(10*(x-1))+y].player)temp[(10*(x-1))+y].activated = true;\n            if(!temp[(10*(x+1))+y].player) temp[(10*(x+1))+y].activated = true;\n            setPlayerActive({x, y});\n        }\n        setCells(temp);\n    };\n\n    const movePlayer = ({x, y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player = true;\n        temp[10*playerActive.x + playerActive.y].player = false;\n        temp[(10*playerActive.x)-1+playerActive.y].activated = false;\n        temp[(10*playerActive.x)+1+playerActive.y].activated = false;\n        temp[(10*(playerActive.x-1))+playerActive.y].activated = false;\n        temp[(10*(playerActive.x+1))+playerActive.y].activated = false;\n        setCells(temp);\n    }\n\n    return <div className={style.gridSetting}>\n       {cells.map((item) => <Cell \n            onClick={toggleCells}\n            onMove={movePlayer}\n            x={item.x} \n            y={item.y} \n            player={item.player}\n            activated={item.activated}\n            usable={item.usable}\n        />)}   \n    </div>;\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}