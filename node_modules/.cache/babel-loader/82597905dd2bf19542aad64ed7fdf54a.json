{"ast":null,"code":"var _jsxFileName = \"/Users/ximena.contreras/Desktop/test/quadra/src/grid/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Cell from \"./cell\";\nimport style from \"./style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst character = {\n  \"maxHP\": 100,\n  \"currentHP\": 100,\n  \"strength\": 2,\n  \"active\": false\n};\n\nconst Grid = _ref => {\n  _s();\n\n  let {\n    map\n  } = _ref;\n  const [cells, setCells] = useState([]);\n  const [playerActive, setPlayerActive] = useState({});\n  const [currentChar, setCurrentChar] = useState([]);\n  useEffect(() => {\n    const cells = [];\n    const currentChar = [];\n\n    for (let x = 0; x < 10; x++) {\n      for (let y = 0; y < 10; y++) {\n        if (map[`${x}${y}`]) {\n          if (map[`${x}${y}`].player) {\n            const newChar = { ...character\n            };\n            cells.push({\n              x,\n              y,\n              activated: false,\n              ...map[`${x}${y}`],\n              player: newChar\n            });\n            currentChar.push(newChar);\n          } else cells.push({\n            x,\n            y,\n            activated: false,\n            ...map[`${x}${y}`],\n            player: false\n          });\n        } else cells.push({\n          x,\n          y,\n          player: false,\n          activated: false,\n          usable: true\n        });\n      }\n    }\n\n    setCells(cells);\n    setCurrentChar(currentChar);\n  }, []);\n\n  const toggleCells = _ref2 => {\n    let {\n      x,\n      y\n    } = _ref2;\n    const temp = [...cells];\n\n    if (playerActive.x === x && playerActive.y === y) {\n      if (temp[10 * x - 1 + y]) temp[10 * x - 1 + y].activated = false;\n      if (temp[10 * x + 1 + y]) temp[10 * x + 1 + y].activated = false;\n      if (temp[10 * (x - 1) + y]) temp[10 * (x - 1) + y].activated = false;\n      if (temp[10 * (x + 1) + y]) temp[10 * (x + 1) + y].activated = false;\n      setPlayerActive({});\n    } else {\n      if (playerActive.x) {\n        const {\n          x,\n          y\n        } = playerActive;\n        if (temp[10 * x - 1 + y]) temp[10 * x - 1 + y].activated = false;\n        if (temp[10 * x + 1 + y]) temp[10 * x + 1 + y].activated = false;\n        if (temp[10 * (x - 1) + y]) temp[10 * (x - 1) + y].activated = false;\n        if (temp[10 * (x + 1) + y]) temp[10 * (x + 1) + y].activated = false;\n      }\n\n      if (temp[10 * x - 1 + y]) temp[10 * x - 1 + y].activated = true;\n      if (temp[10 * x + 1 + y]) temp[10 * x + 1 + y].activated = true;\n      if (temp[10 * (x - 1) + y]) temp[10 * (x - 1) + y].activated = true;\n      if (temp[10 * (x + 1) + y]) temp[10 * (x + 1) + y].activated = true;\n      setPlayerActive({\n        x,\n        y\n      });\n    }\n\n    setCells(temp);\n  };\n\n  const movePlayer = _ref3 => {\n    let {\n      x,\n      y\n    } = _ref3;\n    const temp = [...cells];\n    temp[10 * x + y].player = temp[10 * playerActive.x + playerActive.y].player;\n    if (temp[10 * playerActive.x + playerActive.y]) temp[10 * playerActive.x + playerActive.y].player = false;\n    if (temp[10 * playerActive.x - 1 + playerActive.y]) temp[10 * playerActive.x - 1 + playerActive.y].activated = false;\n    if (temp[10 * playerActive.x + 1 + playerActive.y]) temp[10 * playerActive.x + 1 + playerActive.y].activated = false;\n    if (temp[10 * (playerActive.x - 1) + playerActive.y]) temp[10 * (playerActive.x - 1) + playerActive.y].activated = false;\n    if (temp[10 * (playerActive.x + 1) + playerActive.y]) temp[10 * (playerActive.x + 1) + playerActive.y].activated = false;\n    setCells(temp);\n  };\n\n  const attackChar = _ref4 => {\n    let {\n      x,\n      y\n    } = _ref4;\n    const temp = [...cells];\n    temp[10 * x + y].player.currentHP -= temp[10 * playerActive.x + playerActive.y].player.strength;\n    setCells(temp);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.playBoard,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.gridSetting,\n      children: cells.map(item => /*#__PURE__*/_jsxDEV(Cell, {\n        onClick: toggleCells,\n        onMove: movePlayer,\n        onAttack: attackChar,\n        x: item.x,\n        y: item.y,\n        player: item.player,\n        activated: item.activated,\n        usable: item.usable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentChar.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [index, \": \", item.currentHP, \"/\", item.maxHP]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 50\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Grid, \"QNRDSxXKB54AqGICpBAU0zDTVvM=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/ximena.contreras/Desktop/test/quadra/src/grid/index.js"],"names":["React","useEffect","useState","Cell","style","character","Grid","map","cells","setCells","playerActive","setPlayerActive","currentChar","setCurrentChar","x","y","player","newChar","push","activated","usable","toggleCells","temp","movePlayer","attackChar","currentHP","strength","playBoard","gridSetting","item","index","maxHP"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\"\nimport Cell from \"./cell\"\nimport style  from \"./style.module.css\"\n\nconst character = {\n    \"maxHP\": 100,\n    \"currentHP\": 100,\n    \"strength\": 2,\n    \"active\": false,\n}\n\nconst Grid = ({ map } ) => {\n\n    const [cells, setCells] = useState([]);\n    const [playerActive, setPlayerActive] = useState({});\n    const [currentChar, setCurrentChar] = useState([]);\n\n    useEffect (() => {\n        const cells = [];\n        const currentChar = [];\n        for(let x = 0; x < 10; x++) {\n            for(let y = 0; y < 10; y++) {\n                if(map[`${x}${y}`]) {\n                    if(map[`${x}${y}`].player){\n                        const newChar = {...character};\n                        cells.push({x, y, activated: false, ...map[`${x}${y}`], player: newChar });\n                        currentChar.push(newChar);\n                    } else cells.push({x, y, activated: false, ...map[`${x}${y}`], player: false});\n                }\n                else cells.push({x, y, player: false, activated: false, usable: true });\n            }\n        }\n        setCells(cells);\n        setCurrentChar(currentChar);\n    }, []);\n\n    const toggleCells = ({x, y}) => {\n        const temp = [...cells];\n        if(playerActive.x === x && playerActive.y === y) {\n            if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = false;\n            if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = false;\n            if(temp[(10*(x-1))+y]) temp[(10*(x-1))+y].activated = false;\n            if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = false;\n            setPlayerActive({});\n        } else {\n            if(playerActive.x) {\n                const {x, y} = playerActive;\n                if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = false;\n                if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = false;\n                if(temp[(10*(x-1))+y]) temp[(10*(x-1))+y].activated = false;\n                if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = false;\n            }\n            if(temp[(10*x)-1+y]) temp[(10*x)-1+y].activated = true;\n            if(temp[(10*x)+1+y]) temp[(10*x)+1+y].activated = true;\n            if(temp[(10*(x-1))+y])temp[(10*(x-1))+y].activated = true;\n            if(temp[(10*(x+1))+y]) temp[(10*(x+1))+y].activated = true;\n            setPlayerActive({x, y});\n        }\n        setCells(temp);\n    };\n\n    const movePlayer = ({x, y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player = temp[10*playerActive.x + playerActive.y].player;\n        if(temp[10*playerActive.x + playerActive.y]) temp[10*playerActive.x + playerActive.y].player = false;\n        if(temp[(10*playerActive.x)-1+playerActive.y]) temp[(10*playerActive.x)-1+playerActive.y].activated = false;\n        if(temp[(10*playerActive.x)+1+playerActive.y]) temp[(10*playerActive.x)+1+playerActive.y].activated = false;\n        if(temp[(10*(playerActive.x-1))+playerActive.y]) temp[(10*(playerActive.x-1))+playerActive.y].activated = false;\n        if(temp[(10*(playerActive.x+1))+playerActive.y]) temp[(10*(playerActive.x+1))+playerActive.y].activated = false;\n        setCells(temp);\n    }\n\n    const attackChar = ({x , y}) => {\n        const temp = [...cells];\n        temp[10*x + y].player.currentHP -= temp[10*playerActive.x + playerActive.y].player.strength;\n        setCells(temp);\n    }\n\n    return <div className={style.playBoard}>\n        <div className={style.gridSetting}>\n        {cells.map((item) => <Cell \n                onClick={toggleCells}\n                onMove={movePlayer}\n                onAttack={attackChar}\n                x={item.x} \n                y={item.y} \n                player={item.player}\n                activated={item.activated}\n                usable={item.usable}\n            />)}   \n        </div>\n        <div>\n            <ul>\n                {currentChar.map((item, index)=> <li>{index}: { item.currentHP}/{item.maxHP}</li>)}\n            </ul>\n        </div>\n    </div>;\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}